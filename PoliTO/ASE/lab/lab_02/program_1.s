; ******** MIPS64 *********
; for (i = 0; i < 64; i++) {	
;   v5[i] = ((v1[i]* v2[i]) + v3[i]) + v4[i];
;   v6[i] = v5[i]/(v4[i]+v1[i]);
;   v7[i] = v6[i]*(v2[i]+v3[i]);
; }

.data

; We have 4 vectors of 64 doubles each
; assuming v1 and v4 do not contain 0 values
; v5, v6, v7 are empty vectors of the same size

v1: .double 1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1,
.double 9.1, 10.1, 11.1, 12.1, 13.1, 14.1, 15.1, 16.1,
.double 17.1, 18.1, 19.1, 20.1, 21.1, 22.1, 23.1, 24.1,
.double 25.1, 26.1, 27.1, 28.1, 29.1, 30.1, 31.1, 32.1,
.double 33.1, 34.1, 35.1, 36.1, 37.1, 38.1, 39.1, 40.1,
.double 41.1, 42.1, 43.1, 44.1, 45.1, 46.1, 47.1, 48.1,
.double 49.1, 50.1, 51.1, 52.1, 53.1, 54.1, 55.1, 56.1,
.double 57.1, 58.1, 59.1, 60.1, 61.1, 62.1, 63.1, 64.1
v2: .double 1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1,
.double 9.1, 10.1, 11.1, 12.1, 13.1, 14.1, 15.1, 16.1,
.double 17.1, 18.1, 19.1, 20.1, 21.1, 22.1, 23.1, 24.1,
.double 25.1, 26.1, 27.1, 28.1, 29.1, 30.1, 31.1, 32.1,
.double 33.1, 34.1, 35.1, 36.1, 37.1, 38.1, 39.1, 40.1,
.double 41.1, 42.1, 43.1, 44.1, 45.1, 46.1, 47.1, 48.1,
.double 49.1, 50.1, 51.1, 52.1, 53.1, 54.1, 55.1, 56.1,
.double 57.1, 58.1, 59.1, 60.1, 61.1, 62.1, 63.1, 64.1
v3: .double 1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1,
.double 9.1, 10.1, 11.1, 12.1, 13.1, 14.1, 15.1, 16.1,
.double 17.1, 18.1, 19.1, 20.1, 21.1, 22.1, 23.1, 24.1,
.double 25.1, 26.1, 27.1, 28.1, 29.1, 30.1, 31.1, 32.1,
.double 33.1, 34.1, 35.1, 36.1, 37.1, 38.1, 39.1, 40.1,
.double 41.1, 42.1, 43.1, 44.1, 45.1, 46.1, 47.1, 48.1,
.double 49.1, 50.1, 51.1, 52.1, 53.1, 54.1, 55.1, 56.1,
.double 57.1, 58.1, 59.1, 60.1, 61.1, 62.1, 63.1, 64.1
v4: .double 1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1,
.double 9.1, 10.1, 11.1, 12.1, 13.1, 14.1, 15.1, 16.1,
.double 17.1, 18.1, 19.1, 20.1, 21.1, 22.1, 23.1, 24.1,
.double 25.1, 26.1, 27.1, 28.1, 29.1, 30.1, 31.1, 32.1,
.double 33.1, 34.1, 35.1, 36.1, 37.1, 38.1, 39.1, 40.1,
.double 41.1, 42.1, 43.1, 44.1, 45.1, 46.1, 47.1, 48.1,
.double 49.1, 50.1, 51.1, 52.1, 53.1, 54.1, 55.1, 56.1,
.double 57.1, 58.1, 59.1, 60.1, 61.1, 62.1, 63.1, 64.1

v5: .space 512
v6: .space 512
v7: .space 512

.text

main:

    daddi   R11,    R0,         64                      ; loads index i in R11

for_loop:

; loads the value of vx[i] in Fx

    l.d     F1,     v1(R11)
    l.d     F2,     v2(R11)
    l.d     F3,     v3(R11)
    l.d     F4,     v4(R11)
    l.d     F5,     v5(R11)
    l.d     F6,     v6(R11)
    l.d     F7,     v7(R11)

    mul.d   R1,     F1,         F2                      ; R1 = v1[i]*v2[i]
    add.d   R1,     R1,         F3                      ; R1 = R1 + v3[i]
    add.d   R1,     R1,         F4                      ; R1 = R1 + v4[i]
    s.d     R1,     v5(R11)                             ; v5[i] = R1

    add.d   R1,     F4,         F1                      ; R1 = v4[i] + v1[i]
    div.d   R1,     F5,         R1                      ; R1 = v5[i]/R1
    s.d     R1,     v6(R11)                             ; v6[i] = R1

    add.d   R1,     F2,         F3                      ; R1 = v2[i] + v3[i]
    mul.d   R1,     F6,         R1                      ; R1 = v6[i]*R1
    s.d     R1,     v7(R11)                             ; v7[i] = R1

    daddi   R11,    R11,        -8                      ; i--
    bnez    R11,    for_loop                            ; if i != 0, repeat

end:
    halt    