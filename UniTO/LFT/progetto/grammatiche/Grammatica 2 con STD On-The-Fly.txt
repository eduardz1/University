P   -> {S.next=newlabel()} SL {emitlabel(S.next)} eof

SL  -> S SLP {SL.code = S.code || SLP.code}

SLP -> ; S SLP {SLP.code = S.code || SLP.code}
SLP -> epsilon {SLP.code = []}

S   -> assign E to I {S.code = E.code || I(0).code}
S   -> print ( EL ) {S.code = EL(1).code}
S   -> read ( I ) {S.code = I(1).code}
S   -> while ( B ) S {
                      S.true  = newlabel()
                      S.false = newlabel()
                      S.start = newlabel()
                      S.code = emitlabel(S.start)  ||
                               BP(S.true, S.false) ||
                               emitlabel(S.true)   ||
                               S.code              ||
                               emit(GOTO, S.start) ||
                               emitlabel(S.false)
                      }
S   -> if ( B ) S SP {
                      S.true  = newlabel()
                      S.false = newlabel()
                      S.end   = newlabel()
                      S.code = BP(S.true, S.false) ||
                               emitlabel(S.true)   ||
                               S.code              ||
                               SP(S.false, S.end).code
                      }
S   -> { SL } {S.code = SL(0).code}

SP  -> end {
            SP.code = emit(GOTO, SP.end)  ||
                      emitlabel(SP.false) ||
                      emitlabel(SP.end)
            }
SP  -> else S end {
                   SP.code = emit(GOTO, SP.end)  ||
                             emitlabel(SP.false) ||
                             S.code              ||
                             emitlabel(SP.end)
                   }

I   -> id IP {
              int ID ||
              I.code = ....

IP  -> , id IP .....
IP  -> epsilon {IP.code=goto IP.next}.....

B   -> relop E1 E2 {B.code=E1.code || E2.code || if_icmp(relop) B.true || goto B.false}.....
B   -> BP

BP  -> and BS BS
BP  -> or BS BS
BP  -> not BS
BP  -> BS

BS  -> B

E   -> + ( EL )
E   -> - E E {emit(isub)}
E   -> * ( EL )
E   -> / E E {emit(idiv)}
E   -> {emit(ldc, val)} num 
E   -> {emit(iload, id_addr)} id

EL  -> E ELP

ELP -> , E ELP
ELP -> epsilon
